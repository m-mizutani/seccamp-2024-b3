// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"context"
	"net/http"
	"sync"
)

// Ensure, that HTTPClientMock does implement HTTPClient.
// If this is not the case, regenerate this file with moq.
var _ HTTPClient = &HTTPClientMock{}

// HTTPClientMock is a mock implementation of HTTPClient.
//
//	func TestSomethingThatUsesHTTPClient(t *testing.T) {
//
//		// make and configure a mocked HTTPClient
//		mockedHTTPClient := &HTTPClientMock{
//			DoFunc: func(req *http.Request) (*http.Response, error) {
//				panic("mock out the Do method")
//			},
//		}
//
//		// use mockedHTTPClient in code that requires HTTPClient
//		// and then make assertions.
//
//	}
type HTTPClientMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(req *http.Request) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Req is the req argument value.
			Req *http.Request
		}
	}
	lockDo sync.RWMutex
}

// Do calls DoFunc.
func (mock *HTTPClientMock) Do(req *http.Request) (*http.Response, error) {
	if mock.DoFunc == nil {
		panic("HTTPClientMock.DoFunc: method is nil but HTTPClient.Do was just called")
	}
	callInfo := struct {
		Req *http.Request
	}{
		Req: req,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(req)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//
//	len(mockedHTTPClient.DoCalls())
func (mock *HTTPClientMock) DoCalls() []struct {
	Req *http.Request
} {
	var calls []struct {
		Req *http.Request
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}

// Ensure, that InserterMock does implement Inserter.
// If this is not the case, regenerate this file with moq.
var _ Inserter = &InserterMock{}

// InserterMock is a mock implementation of Inserter.
//
//	func TestSomethingThatUsesInserter(t *testing.T) {
//
//		// make and configure a mocked Inserter
//		mockedInserter := &InserterMock{
//			PutFunc: func(ctx context.Context, rows any) error {
//				panic("mock out the Put method")
//			},
//		}
//
//		// use mockedInserter in code that requires Inserter
//		// and then make assertions.
//
//	}
type InserterMock struct {
	// PutFunc mocks the Put method.
	PutFunc func(ctx context.Context, rows any) error

	// calls tracks calls to the methods.
	calls struct {
		// Put holds details about calls to the Put method.
		Put []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Rows is the rows argument value.
			Rows any
		}
	}
	lockPut sync.RWMutex
}

// Put calls PutFunc.
func (mock *InserterMock) Put(ctx context.Context, rows any) error {
	if mock.PutFunc == nil {
		panic("InserterMock.PutFunc: method is nil but Inserter.Put was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Rows any
	}{
		Ctx:  ctx,
		Rows: rows,
	}
	mock.lockPut.Lock()
	mock.calls.Put = append(mock.calls.Put, callInfo)
	mock.lockPut.Unlock()
	return mock.PutFunc(ctx, rows)
}

// PutCalls gets all the calls that were made to Put.
// Check the length with:
//
//	len(mockedInserter.PutCalls())
func (mock *InserterMock) PutCalls() []struct {
	Ctx  context.Context
	Rows any
} {
	var calls []struct {
		Ctx  context.Context
		Rows any
	}
	mock.lockPut.RLock()
	calls = mock.calls.Put
	mock.lockPut.RUnlock()
	return calls
}
